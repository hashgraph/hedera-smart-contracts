# SPDX-License-Identifier: Apache-2.0
name: 'ZXC: JSON-RPC Relay Regression'
on:
  push:
    branches: [20738-add-json-rpc-relay-acceptance-tests-v1]
defaults:
  run:
    shell: bash

permissions:
  checks: write
  contents: read
  actions: write
  statuses: write
  id-token: write

env:
  SOLO_CLUSTER_NAME: 'solo-rpc-relay-e2e'
  SOLO_NAMESPACE: 'solo-rpc-relay-e2e'
  SOLO_DEPLOYMENT: 'solo-rpc-relay-deployment'
  SOLO_CLUSTER_SETUP_NAMESPACE: 'solo-setup'
  GRADLE_EXEC: ionice -c 2 -n 2 nice -n 19 ./gradlew

jobs:
  # Execute JSON-RPC Relay Regression Tests using specified version of hiero-consensus-node
  json-rpc-relay-regression:
    name: 'Standard'
    runs-on: smart-contracts-linux-large
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # Check out the specified hiero-consensus-node reference
      - name: Checkout Consensus Node
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: hiero-ledger/hiero-consensus-node
          ref: ''
          fetch-depth: 0

      # Set up Java Environment
      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: temurin
          java-version: 21.0.6

      # Set up the gradle environment
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4.4.1
        with:
          cache-read-only: false

      # Build the hiero-consensus-node artifacts
      - name: Build hiero-consensus-node
        run:
          ${GRADLE_EXEC} assemble

          # Set up the node environment
      - name: Setup NodeJS Environment
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22

      #  Checkout the json-rpc-relay repository
      - name: Checkout JSON-RPC Relay
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: regression-tests/json-rpc-relay
          repository: hiero-ledger/hiero-json-rpc-relay
          fetch-depth: 0
          fetch-tags: true

      # Set up the npm dependencies and cache on the json-rpc-relay repository
      - name: Install NodeJS Dependencies (json-rpc-relay)
        run: npm ci
        working-directory: regression-tests/json-rpc-relay

      # Install solo and configure to use the artifacts from
      # the hiero-consensus-node build
      - name: Install Solo
        run: npm install -g @hashgraph/solo@latest

      # Set up kind; needed for configuring the solo environment
      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          node_image: kindest/node:v1.30.4 # stable K8s image
          version: v0.22.0 # stable kind version
          kubectl_version: v1.30.4
          verbosity: 3
          wait: 120s
      # Set up solo
      - name: Configure and run solo
        run: |
          kind create cluster -n "${SOLO_CLUSTER_NAME}"
          solo init
          solo cluster-ref connect --cluster-ref kind-${SOLO_CLUSTER_NAME} --context kind-${SOLO_CLUSTER_NAME}
          solo deployment create -n "${SOLO_NAMESPACE}" --deployment "${SOLO_DEPLOYMENT}"
          solo deployment add-cluster --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-${SOLO_CLUSTER_NAME} --num-consensus-nodes 1
          solo node keys --gossip-keys --tls-keys --deployment "${SOLO_DEPLOYMENT}"
          solo cluster-ref setup -s "${SOLO_CLUSTER_SETUP_NAMESPACE}"
          solo network deploy --deployment "${SOLO_DEPLOYMENT}" --profile medium
          solo node setup --deployment "${SOLO_DEPLOYMENT}" --local-build-path ./hedera-node/data
          solo node start --deployment "${SOLO_DEPLOYMENT}"
          solo mirror-node deploy --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-${SOLO_CLUSTER_NAME} --enable-ingress --pinger --profile medium
      # Perform JSON-RPC Relay regression tests
      - name: Start json-rpc-relay-test-client
        env:
          CHAIN_ID: '0x12a'
          MIRROR_NODE_URL: 'http://127.0.0.1:8081'
          HEDERA_NETWORK: '{"127.0.0.1:50211":"0.0.3"}'
          OPERATOR_ID_MAIN: 0.0.2
          OPERATOR_KEY_MAIN: 302e020100300506032b65700422042091132178e72057a1d7528025956fe39b0b847f200ab59b2fdd367017f3087137
          REDIS_ENABLED: false
          USE_ASYNC_TX_PROCESSING: false
        run: npm run build && npm run acceptancetest:xts
        working-directory: regression-tests/json-rpc-relay # required

      - name: JSON-RPC Relay Regression Test Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ !cancelled() }}
        with:
          name: JSON-RPC Relay Regression Test Report
          path: '**/regression-tests/platform-sdk/regression/mochawesome-report/mochawesome.*'
          retention-days: 7

      - name: Dump CN/MN logs on failure
        if: failure()
        run: |
          kubectl get pods -n ${SOLO_NAMESPACE} -o wide || true
          kubectl describe pods -n ${SOLO_NAMESPACE} || true
          kubectl logs -n ${SOLO_NAMESPACE} deploy/hedera-consensus-node --tail=200 || true
          kubectl logs -n ${SOLO_NAMESPACE} statefulset/mirror-node-postgres --tail=200 || true
      - name: Stop solo
        if: ${{ always() }}
        run: |
          kind delete cluster -n ${{ env.SOLO_CLUSTER_NAME }}
